{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Error/Error.js","components/Form/TextInput.js","components/Form/TextArea.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","Error","text","TextInput","fieldName","fieldData","textsOfErrors","handleFieldBlur","handleFieldChange","htmlFor","fieldLabel","id","type","value","input","onBlur","onChange","showError","isValid","default","TextArea","defaultMovieProps","urlPattern","NewMovie","state","url","reset","setState","checkValid","field","setMovieProp","trim","test","prop","onAdd","e","preventDefault","Object","values","every","preparedMovie","props","addMovie","target","this","isAllValid","onSubmit","entries","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8800195.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ text }) => (\n  <div className=\"form__error\">\n    {text}\n  </div>\n);\n\nError.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Error from '../Error/Error';\nimport './Form.scss';\n\nconst TextInput = ({\n  fieldName,\n  fieldData,\n  textsOfErrors,\n  handleFieldBlur,\n  handleFieldChange,\n}) => (\n  <label htmlFor={fieldName} className=\"form__label\">\n    {fieldData.fieldLabel}\n    <input\n      id={fieldName}\n      className=\"form__field\"\n      type=\"text\"\n      value={fieldData.input}\n      onBlur={handleFieldBlur}\n      onChange={handleFieldChange}\n    />\n    {\n      fieldData.showError\n      && !fieldData.isValid\n      && <Error text={textsOfErrors[fieldData.type] || textsOfErrors.default} />\n    }\n  </label>\n);\n\nTextInput.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldData: PropTypes.shape({\n    input: PropTypes.string.isRequired,\n    fieldLabel: PropTypes.string.isRequired,\n    showError: PropTypes.bool.isRequired,\n    isValid: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n  }).isRequired,\n  textsOfErrors: PropTypes.shape({\n    default: PropTypes.string.isRequired,\n  }).isRequired,\n  handleFieldBlur: PropTypes.func.isRequired,\n  handleFieldChange: PropTypes.func.isRequired,\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Error from '../Error/Error';\nimport './Form.scss';\n\nconst TextArea = ({\n  fieldName,\n  fieldData,\n  textsOfErrors,\n  handleFieldBlur,\n  handleFieldChange,\n}) => (\n  <label htmlFor={fieldName} className=\"form__label\">\n    {fieldData.fieldLabel}\n    <textarea\n      id={fieldName}\n      className=\"form field form__field--textarea\"\n      type=\"text\"\n      value={fieldData.input}\n      onBlur={handleFieldBlur}\n      onChange={handleFieldChange}\n    />\n    {\n      fieldData.showError\n      && !fieldData.isValid\n      && <Error text={textsOfErrors.default} />\n    }\n  </label>\n);\n\nTextArea.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldData: PropTypes.shape({\n    input: PropTypes.string.isRequired,\n    fieldLabel: PropTypes.string.isRequired,\n    showError: PropTypes.bool.isRequired,\n    isValid: PropTypes.bool.isRequired,\n  }).isRequired,\n  textsOfErrors: PropTypes.shape({\n    default: PropTypes.string.isRequired,\n  }).isRequired,\n  handleFieldBlur: PropTypes.func.isRequired,\n  handleFieldChange: PropTypes.func.isRequired,\n};\n\nexport default TextArea;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../Form/TextInput';\nimport TextArea from '../Form/TextArea';\n\nconst defaultMovieProps = {\n  title: {\n    value: '',\n    input: '',\n    type: 'text',\n    fieldLabel: 'Title',\n    isValid: false,\n    showError: false,\n  },\n  description: {\n    value: '',\n    input: '',\n    type: 'textarea',\n    fieldLabel: 'Description',\n    isValid: false,\n    showError: false,\n  },\n  imgUrl: {\n    value: '',\n    input: '',\n    type: 'url',\n    fieldLabel: 'Image URL',\n    isValid: false,\n    showError: false,\n  },\n  imdbUrl: {\n    value: '',\n    input: '',\n    type: 'url',\n    fieldLabel: 'IMDB URL',\n    isValid: false,\n    showError: false,\n  },\n  imdbId: {\n    value: '',\n    input: '',\n    type: 'text',\n    fieldLabel: 'IMDB ID',\n    isValid: false,\n    showError: false,\n  },\n};\n\n// eslint-disable-next-line max-len\nconst urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component {\n  state = {\n    ...defaultMovieProps,\n  };\n\n  textsOfErrors = {\n    default: 'Please fill in the field correctly.',\n    url: 'Please enter a valid URL',\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n\n  reset = () => {\n    this.setState(() => ({\n      ...defaultMovieProps,\n    }));\n  }\n\n  checkValid = (field, value = '', type) => {\n    if (type === 'text' || type === 'textarea') {\n      this.setMovieProp(field, 'isValid', !!value.trim());\n    }\n\n    if (type === 'url') {\n      const isValid = urlPattern.test(value);\n\n      this.setMovieProp(field, 'isValid', isValid);\n    }\n  };\n\n  setMovieProp = (field, prop, value) => {\n    this.setState(state => ({\n      ...state,\n      [field]: {\n        ...state[field],\n        [prop]: value,\n      },\n    }));\n  }\n\n  onAdd = (e) => {\n    e.preventDefault();\n\n    const isAllValid = Object.values(this.state).every(prop => prop.isValid);\n\n    if (!isAllValid) {\n      return;\n    }\n\n    const { title, description, imgUrl, imdbUrl, imdbId } = this.state;\n    const preparedMovie = {\n      title: title.value,\n      description: description.value,\n      imgUrl: imgUrl.value,\n      imdbUrl: imdbUrl.value,\n      imdbId: imdbId.value,\n    };\n\n    this.reset();\n    this.props.addMovie(preparedMovie);\n  };\n\n  handleFieldBlur = ({ target }) => {\n    const { id, value } = target;\n    const { type } = this.state[id];\n\n    this.checkValid(id, value, type);\n    this.setMovieProp(id, 'value', value.trim());\n    this.setMovieProp(id, 'showError', true);\n  }\n\n  handleFieldChange = ({ target }) => {\n    const { id, value } = target;\n    const { type } = this.state[id];\n\n    this.checkValid(id, value.trim(), type);\n    this.setMovieProp(id, 'input', value);\n  }\n\n  render() {\n    const isAllValid = Object.values(this.state).every(prop => prop.isValid);\n\n    return (\n      <form onSubmit={this.onAdd} className=\"form\">\n        {Object.entries(this.state).map((field) => {\n          const [fieldName, fieldData] = field;\n\n          if (fieldData.type === 'textarea') {\n            return (\n              <TextArea\n                key={fieldName}\n                fieldName={fieldName}\n                fieldData={fieldData}\n                textsOfErrors={this.textsOfErrors}\n                handleFieldBlur={this.handleFieldBlur}\n                handleFieldChange={this.handleFieldChange}\n              />\n            );\n          }\n\n          return (\n            <TextInput\n              key={fieldName}\n              fieldName={fieldName}\n              fieldData={fieldData}\n              textsOfErrors={this.textsOfErrors}\n              handleFieldBlur={this.handleFieldBlur}\n              handleFieldChange={this.handleFieldChange}\n            />\n          );\n        })}\n\n        <button type=\"submit\" className=\"form__button\" disabled={!isAllValid}>\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: [...moviesFromServer],\n  };\n\n  addMovie = ({ title, description, imgUrl, imdbUrl, imdbId }) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        {\n          title,\n          description,\n          imgUrl,\n          imdbUrl,\n          imdbId,\n        },\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}