{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Form/TextInput.js","components/Form/TextArea.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","TextInput","fieldName","fieldData","textsOfErrors","handleFieldBlur","handleFieldChange","htmlFor","fieldLabel","id","cn","showError","isValid","type","value","input","onBlur","onChange","default","TextArea","defaultMovieProps","urlPattern","NewMovie","state","url","reset","setState","checkValid","field","setMovieProp","trim","test","checkAllValid","Object","values","every","prop","onAdd","e","preventDefault","preparedMovie","props","addMovie","target","this","onSubmit","entries","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a82d6a6a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './Form.scss';\n\nconst TextInput = ({\n  fieldName,\n  fieldData,\n  textsOfErrors,\n  handleFieldBlur,\n  handleFieldChange,\n}) => (\n  <label htmlFor={fieldName} className=\"form__label\">\n    {fieldData.fieldLabel}\n    <input\n      id={fieldName}\n      className={cn(\n        'form__field',\n        { 'form__field--error': fieldData.showError && !fieldData.isValid },\n      )}\n      type=\"text\"\n      value={fieldData.input}\n      onBlur={handleFieldBlur}\n      onChange={handleFieldChange}\n    />\n    {\n      fieldData.showError\n      && !fieldData.isValid\n      && (\n        <div className=\"form__error\">\n          {textsOfErrors[fieldData.type] || textsOfErrors.default}\n        </div>\n      )\n    }\n  </label>\n);\n\nTextInput.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldData: PropTypes.shape({\n    input: PropTypes.string.isRequired,\n    fieldLabel: PropTypes.string.isRequired,\n    showError: PropTypes.bool.isRequired,\n    isValid: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n  }).isRequired,\n  textsOfErrors: PropTypes.shape({\n    default: PropTypes.string.isRequired,\n  }).isRequired,\n  handleFieldBlur: PropTypes.func.isRequired,\n  handleFieldChange: PropTypes.func.isRequired,\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './Form.scss';\n\nconst TextArea = ({\n  fieldName,\n  fieldData,\n  textsOfErrors,\n  handleFieldBlur,\n  handleFieldChange,\n}) => (\n  <label htmlFor={fieldName} className=\"form__label\">\n    {fieldData.fieldLabel}\n    <textarea\n      id={fieldName}\n      className={cn(\n        'form__textarea',\n        { 'form__textarea--error': fieldData.showError && !fieldData.isValid },\n      )}\n      type=\"text\"\n      value={fieldData.input}\n      onBlur={handleFieldBlur}\n      onChange={handleFieldChange}\n    />\n    {\n      fieldData.showError\n      && !fieldData.isValid\n      && (\n        <div className=\"form__error\">\n          {textsOfErrors[fieldData.type] || textsOfErrors.default}\n        </div>\n      )\n    }\n  </label>\n);\n\nTextArea.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldData: PropTypes.shape({\n    input: PropTypes.string.isRequired,\n    fieldLabel: PropTypes.string.isRequired,\n    showError: PropTypes.bool.isRequired,\n    isValid: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n  }).isRequired,\n  textsOfErrors: PropTypes.shape({\n    default: PropTypes.string.isRequired,\n  }).isRequired,\n  handleFieldBlur: PropTypes.func.isRequired,\n  handleFieldChange: PropTypes.func.isRequired,\n};\n\nexport default TextArea;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../Form/TextInput';\nimport TextArea from '../Form/TextArea';\n\nconst defaultMovieProps = {\n  title: {\n    value: '',\n    input: '',\n    type: 'text',\n    fieldLabel: 'Title',\n    isValid: false,\n    showError: false,\n  },\n  description: {\n    value: '',\n    input: '',\n    type: 'textarea',\n    fieldLabel: 'Description',\n    isValid: false,\n    showError: false,\n  },\n  imgUrl: {\n    value: '',\n    input: '',\n    type: 'url',\n    fieldLabel: 'Image URL',\n    isValid: false,\n    showError: false,\n  },\n  imdbUrl: {\n    value: '',\n    input: '',\n    type: 'url',\n    fieldLabel: 'IMDB URL',\n    isValid: false,\n    showError: false,\n  },\n  imdbId: {\n    value: '',\n    input: '',\n    type: 'text',\n    fieldLabel: 'IMDB ID',\n    isValid: false,\n    showError: false,\n  },\n};\n\n// eslint-disable-next-line max-len\nconst urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component {\n  state = {\n    ...defaultMovieProps,\n  };\n\n  textsOfErrors = {\n    default: 'Please fill in the field correctly.',\n    url: 'Please enter a valid URL',\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n\n  reset = () => {\n    this.setState(() => ({\n      ...defaultMovieProps,\n    }));\n  }\n\n  checkValid = (field, value = '', type) => {\n    if (type === 'text' || type === 'textarea') {\n      this.setMovieProp(field, 'isValid', !!value.trim());\n    }\n\n    if (type === 'url') {\n      const isValid = urlPattern.test(value);\n\n      this.setMovieProp(field, 'isValid', isValid);\n    }\n  };\n\n  checkAllValid = () => {\n    return Object.values(this.state).every(prop => prop.isValid);\n  }\n\n  setMovieProp = (field, prop, value) => {\n    this.setState(state => ({\n      ...state,\n      [field]: {\n        ...state[field],\n        [prop]: value,\n      },\n    }));\n  }\n\n  onAdd = (e) => {\n    e.preventDefault();\n\n    const isAllValid = this.checkAllValid();\n\n    if (!isAllValid) {\n      return;\n    }\n\n    const { title, description, imgUrl, imdbUrl, imdbId } = this.state;\n    const preparedMovie = {\n      title: title.value,\n      description: description.value,\n      imgUrl: imgUrl.value,\n      imdbUrl: imdbUrl.value,\n      imdbId: imdbId.value,\n    };\n\n    this.reset();\n    this.props.addMovie(preparedMovie);\n  };\n\n  handleFieldBlur = ({ target }) => {\n    const { id, value } = target;\n    const { type } = this.state[id];\n\n    this.checkValid(id, value, type);\n    this.setMovieProp(id, 'value', value.trim());\n    this.setMovieProp(id, 'showError', true);\n  }\n\n  handleFieldChange = ({ target }) => {\n    const { id, value } = target;\n    const { type } = this.state[id];\n\n    this.checkValid(id, value.trim(), type);\n    this.setMovieProp(id, 'input', value);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onAdd} className=\"form\">\n        {Object.entries(this.state).map((field) => {\n          const [fieldName, fieldData] = field;\n\n          if (fieldData.type === 'textarea') {\n            return (\n              <TextArea\n                key={fieldName}\n                fieldName={fieldName}\n                fieldData={fieldData}\n                textsOfErrors={this.textsOfErrors}\n                handleFieldBlur={this.handleFieldBlur}\n                handleFieldChange={this.handleFieldChange}\n              />\n            );\n          }\n\n          return (\n            <TextInput\n              key={fieldName}\n              fieldName={fieldName}\n              fieldData={fieldData}\n              textsOfErrors={this.textsOfErrors}\n              handleFieldBlur={this.handleFieldBlur}\n              handleFieldChange={this.handleFieldChange}\n            />\n          );\n        })}\n\n        <button\n          type=\"submit\"\n          className=\"form__button\"\n          disabled={!this.checkAllValid()}\n        >\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: [...moviesFromServer],\n  };\n\n  addMovie = ({ title, description, imgUrl, imdbUrl, imdbId }) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        {\n          title,\n          description,\n          imgUrl,\n          imdbUrl,\n          imdbId,\n        },\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}